@model IEnumerable<withusafe2.Models.location_new>
@{

    ViewBag.Title = "Report";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h3 class="text-head"> Risk Precautions </h3>
<p class="box-desc">WithU provides nurses with simple and quick risk assess and precautions, to support you get prepared for each visit.</p>
<div class="container">
    <div class="row">
        <div class="col-md-8 col-md-offset-2">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="text-headd">Your Risk Precaution Report:</h3>
                    <p class="box-desc">Based on your information, this is your risk precaution report.</p>
                </div>

                <div class="panel-body">
                    <div id="map" style="height:300px"></div>
                    <table class="table" style="display:none">
                        <tr>
                            <th>
                                @Html.DisplayNameFor(model => model.Suburb)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Offence_rate)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Risklevel)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Latitude)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.Longitude)
                            </th>
                        </tr>

                        @foreach (var item in Model)
                        {
                            <tr class="coordinates">
                                <td class="location_name">
                                    @Html.DisplayFor(modelItem => item.Suburb)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Offence_rate)
                                </td>
                                <td class="description">
                                    @Html.DisplayFor(modelItem => item.Risklevel)
                                </td>
                                <td class="latitude">
                                    @Html.DisplayFor(modelItem => item.Latitude)
                                </td>
                                <td class="longitude">
                                    @Html.DisplayFor(modelItem => item.Longitude)
                                </td>
                            </tr>
                        }

                    </table>
                    <hr>
                    <div style="text-align:center">
                        <div style="text-align:center;display: inline-block;">
                            <svg id="fillgauge1" width="97%" height="250" onclick="gauge1.update(NewValue());"></svg>
                        </div>
                    </div>
                    @*<svg id="fillgauge2" width="19%" height="200" onclick="gauge2.update(NewValue());"></svg>
                    <svg id="fillgauge3" width="19%" height="200" onclick="gauge3.update(NewValue());"></svg>
                    <svg id="fillgauge4" width="19%" height="200" onclick="gauge4.update(NewValue());"></svg>
                    <svg id="fillgauge5" width="19%" height="200" onclick="gauge5.update(NewValue());"></svg>
                    <svg id="fillgauge6" width="19%" height="200" onclick="gauge6.update(NewValue());"></svg><svg id="fillgauge2" width="19%" height="200" onclick="gauge2.update(NewValue());"></svg>*@





                    @*<h4>The Violence rate in <font size="6" color="#ff4d4d">@ViewBag.Location</font> area is <font size="6" color="#ff4d4d">@ViewBag.AreaRate</font>.</h4>
        <h4>
            The above Index of your client's location is higher than <font size="6" color="#ff4d4d">@ViewBag.notification%</font> of other suburbs in Victoria.
            <br>

        </h4>*@
                    <hr>
                    <h4>
                        "<font size="6" color="#ff4d4d">@ViewBag.Gender</font>" between "<font size="6" color="#ff4d4d">@ViewBag.Age</font>" years old has the Risk Index of <font size="6" color="#ff4d4d">@ViewBag.RiskRate</font>.
                        <br>
                        <font size="2">(**Risk index is scaled from 0-100, 0 being the least risky, 100 the most risky.)</font>
                    </h4>
                    @*<h3><font size="5" color="black">@ViewBag.notification2</font></h3>*@
                    <hr>
                    <h4>@ViewBag.Checkone</h4>

                    <h4>@ViewBag.Checktwo</h4>

                    <div style="align-content:center;text-align:center;">
                        <nav aria-label="Page navigation example">
                            <ul class="pagination justify-content-center">
                                <li class="page-item">
                                    <a class="page-link" href="/Home/quizz" tabindex="-1">Previous </a>
                                </li>
                                <li class="page-item"><a class="page-link" href="/locations/index"> 1 </a></li>
                                <li class="page-item"><a class="page-link" href="/Home/Gender"> 2 </a></li>
                                <li class="page-item"><a class="page-link" href="/Home/Age"> 3 </a></li>
                                <li class="page-item"><a class="page-link" href="/Home/quiz"> 4 </a></li>
                                <li class="page-item"><a class="page-link" href="/Home/quizz"> 5 </a></li>
                                <li class="page-item">
                                    <a class="page-link" href="/Home/RiskControl">Next</a>
                                </li>
                            </ul>
                        </nav>
                    </div>


                    @*<div style="align-content:center; text-align:center;">
            <button class="top-button white" style="margin-top:10px; height:60px; padding-bottom:30px;">
                <font size="5">@Html.ActionLink("Risk Control", "RiskControl", new { @class = "my-class" })</font>
            </button>
        </div>*@
                </div>
                </div>

            @*<hr>*@

        </div>
    </div>
</div>

@section Scripts {
    @*@Scripts.Render("~/bundles/mapbox")*@
    <script>

    const TOKEN = "pk.eyJ1IjoieGdhbzAwMTMiLCJhIjoiY2psM2l3MHM5MDY3ejNzcGJiZzIyNnFkeiJ9.BlofvrrG07l1SnJMnTB84A";
        var location_id = '@ViewBag.location_id';
        var location_violence_rate = '@ViewBag.AreaRate';
    var loc_id = parseInt(location_id)-1
    var locations = [];
    // The first step is obtain all the latitude and longitude from the HTML
    // The below is a simple jQuery selector
    $(".coordinates").each(function () {
        var longitude = $(".longitude", this).text().trim();
        var latitude = $(".latitude", this).text().trim();
        var description = $(".description", this).text().trim();
        var location_name = $(".location_name", this).text().trim();
        // Create a point data structure to hold the values.
        var point = {
            "latitude": latitude,
            "longitude": longitude,
            "description": "The violence rate in " + location_name + " is " + location_violence_rate + " ,which is higher than " + description + "% of suburbs"
                //"Your risk level in " + location_name + " is higher than " + description + "% of suburbs"
        };
        // Push them all into an array.
        locations.push(point);
    });
    var data = [];
    for (i = 0; i < locations.length; i++) {
        var feature = {
            "type": "Feature",
            "properties": {
                "description": locations[i].description,
                //"icon": "circle-15"
                "icon": ((i === loc_id)? "fire-station-15" : "circle-15"),
                "icon-color": "#ff0000"
               // "icon": "fire-station-15"
            },
            "geometry": {
                "type": "Point",
                "coordinates": [locations[i].longitude, locations[i].latitude]
            }
        };
    data.push(feature);
    }
    mapboxgl.accessToken = TOKEN;
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v10',
        zoom: 11,
        center: [locations[loc_id].longitude, locations[loc_id].latitude]
    });
    var popup = new mapboxgl.Popup({ closeOnClick: false })
        .setLngLat([locations[loc_id].longitude, locations[loc_id].latitude])
        .setHTML(locations[loc_id].description)
        .addTo(map);
    map.on('load', function () {
        // Add a layer showing the places.
        map.addLayer({
            "id": "places",
            "type": "symbol",
            "source": {
                "type": "geojson",

            "data": {
                "type": "FeatureCollection",
                "features": data
            }
        },
        "layout": {
            "icon-image": "{icon}",
            "icon-allow-overlap": true
        },
            "paint": {
                "icon-color": "#00ff00",
                "icon-halo-color": "#fff",
                "icon-halo-width": 8}
        });

    map.addControl(new MapboxGeocoder({
        accessToken: mapboxgl.accessToken
    }));;
    map.addControl(new mapboxgl.NavigationControl());
    // When a click event occurs on a feature in the places layer, open a popup at the
    // location of the feature, with description HTML from its properties.

    // Add geolocate control to the map.
    map.addControl(new mapboxgl.GeolocateControl({
        positionOptions: {
            enableHighAccuracy: true
        },
        trackUserLocation: true
    }));
    map.on('click', 'places', function (e) {
        var coordinates = e.features[0].geometry.coordinates.slice();
        var description = e.features[0].properties.description;
        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }
        new mapboxgl.Popup()
            .setLngLat(coordinates)
            .setHTML(description)
            .addTo(map);
    });
    // Change the cursor to a pointer when the mouse is over the places layer.
    map.on('mouseenter', 'places', function () {
        map.getCanvas().style.cursor = 'pointer';
    });
    // Change it back to a pointer when it leaves.
    map.on('mouseleave', 'places', function () {
        map.getCanvas().style.cursor = '';
    });
    });








        var risk_rate = parseFloat(@ViewBag.RiskRate);
        var gauge1 = loadLiquidFillGauge("fillgauge1", risk_rate);
        var config1 = liquidFillGaugeDefaultSettings();
        //config1.circleColor = "#FF7777";
        //config1.textColor = "#FF4444";
        //config1.waveTextColor = "#FFAAAA";
        //config1.waveColor = "#FFDDDD";
        //config1.circleThickness = 0.2;
        //config1.textVertPosition = 0.2;
        //config1.waveAnimateTime = 1000;

        //var gauge2 = loadLiquidFillGauge("fillgauge2", 28, config1);
        //var config2 = liquidFillGaugeDefaultSettings();
        //config2.circleColor = "#D4AB6A";
        //config2.textColor = "#553300";
        //config2.waveTextColor = "#805615";
        //config2.waveColor = "#AA7D39";
        //config2.circleThickness = 0.1;
        //config2.circleFillGap = 0.2;
        //config2.textVertPosition = 0.8;
        //config2.waveAnimateTime = 2000;
        //config2.waveHeight = 0.3;
        //config2.waveCount = 1;
        //var gauge3 = loadLiquidFillGauge("fillgauge3", 60.1, config2);
        //var config3 = liquidFillGaugeDefaultSettings();
        //config3.textVertPosition = 0.8;
        //config3.waveAnimateTime = 5000;
        //config3.waveHeight = 0.15;
        //config3.waveAnimate = false;
        //config3.waveOffset = 0.25;
        //config3.valueCountUp = false;
        //config3.displayPercent = false;
        //var gauge4 = loadLiquidFillGauge("fillgauge4", 50, config3);
        //var config4 = liquidFillGaugeDefaultSettings();
        //config4.circleThickness = 0.15;
        //config4.circleColor = "#808015";
        //config4.textColor = "#555500";
        //config4.waveTextColor = "#FFFFAA";
        //config4.waveColor = "#AAAA39";
        //config4.textVertPosition = 0.8;
        //config4.waveAnimateTime = 1000;
        //config4.waveHeight = 0.05;
        //config4.waveAnimate = true;
        //config4.waveRise = false;
        //config4.waveHeightScaling = false;
        //config4.waveOffset = 0.25;
        //config4.textSize = 0.75;
        //config4.waveCount = 3;
        //var gauge5 = loadLiquidFillGauge("fillgauge5", 60.44, config4);
        //var config5 = liquidFillGaugeDefaultSettings();
        //config5.circleThickness = 0.4;
        //config5.circleColor = "#6DA398";
        //config5.textColor = "#0E5144";
        //config5.waveTextColor = "#6DA398";
        //config5.waveColor = "#246D5F";
        //config5.textVertPosition = 0.52;
        //config5.waveAnimateTime = 5000;
        //config5.waveHeight = 0;
        //config5.waveAnimate = false;
        //config5.waveCount = 2;
        //config5.waveOffset = 0.25;
        //config5.textSize = 1.2;
        //config5.minValue = 30;
        //config5.maxValue = 150
        //config5.displayPercent = false;
        //var gauge6 = loadLiquidFillGauge("fillgauge6", 120, config5);

        //function NewValue() {
        //    if (Math.random() > .5) {
        //        return Math.round(Math.random() * 100);
        //    } else {
        //        return (Math.random() * 100).toFixed(1);
        //    }
        //}
    </script>
}
