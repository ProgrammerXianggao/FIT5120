@model IEnumerable<withusafe2.Models.location_new>
@{

    ViewBag.Title = "Report";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h3 class="text-head"> Risk Precautions </h3>
<p class="box-desc">WithU provides nurses with simple and quick risk assess and precautions, to support you get prepared for each visit.</p>
<div class="container-fluid">
    <div class="row">
        <div class="col-lg-6 bg-success" style="margin-left:30px; margin-right:30px;">
            <div class="panel-body">
                <div id="map" style="height:400px"></div>
                <table class="table" style="display:none">
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Suburb)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Offence_rate)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Risklevel)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Latitude)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Longitude)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Offence_count)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.safe_count)
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.unsafe_count)
                        </th>
                    </tr>

                    @foreach (var item in Model)
                    {
                    <tr class="coordinates">
                        <td class="location_name">
                            @Html.DisplayFor(modelItem => item.Suburb)
                        </td>
                        <td class="offence_rate">
                            @Html.DisplayFor(modelItem => item.Offence_rate)
                        </td>
                        <td class="description">
                            @Html.DisplayFor(modelItem => item.Risklevel)
                        </td>
                        <td class="latitude">
                            @Html.DisplayFor(modelItem => item.Latitude)
                        </td>
                        <td class="longitude">
                            @Html.DisplayFor(modelItem => item.Longitude)
                        </td>
                        <td class="Offence_count">
                            @Html.DisplayFor(modelItem => item.Offence_count)
                        </td>
                        <td class="safe_count">
                            @Html.DisplayFor(modelItem => item.safe_count)
                        </td>
                        <td class="unsafe_count">
                            @Html.DisplayFor(modelItem => item.unsafe_count)
                        </td>
                    </tr>
                    }
                </table>
            </div>
        </div>

        <div class="col-lg-5 bg-warning" style="height:425px; padding-bottom:50px;margin-left:30px;">
            <h4 class="text-head" align="left"> <font color="DF744A">Risk precaution suggestions: </font></h4>
            @*<div class="col-sm-8">*@
            <p style="font-size:18px;">Here are the risk control suggestions following Victorian legislation: Occupational Health and Safety Act (2004), Workplace Injury Rehabilitation and Compensation Act 2013, Crimes Act (1958), Equal Opportunity Act (2010), Human Rights Charter, Mental Health Act (2014), Aged Care Act 1997, Victorian Health Records Act (2001), Information Privacy Act 2000.</p>

            <div class="panel-body">
                <ul style="font-size:20px;">
                    <li>- Refer to senior clinician</li>
                    <li>- Initiate security back-up if needed</li>
                    <li>- Consider treatment environment</li>
                    <li>- Minimum of two employees during client contact</li>
                    <li>- Communicate identified risk</li>
                    <li>- Monitor of behaviour/situation</li>
                </ul>
            </div>
            <br />
            <br />
            
        </div>

    </div>


    <div class="row">
        <div class="col-lg-4 bg-suggest" style="text-align:center;height:400px; margin-left:30px;">
            <h4 style="padding-top:10px;">
                <font size="4" color="#ff4d4d">@ViewBag.Gender</font> between <font size="4" color="#ff4d4d">@ViewBag.Age</font> years old has the Risk Level:
                <font size="4" color="#ff4d4d">@ViewBag.Gender</font> between <font size="4" color="#ff4d4d">@ViewBag.Age</font> years old has the Risk Level:
                <br>
                @*<font size="2">(**Risk index is scaled from 0-100, 0 being the least risky, 100 the most risky.)</font>*@
            </h4>
            <hr>
            <div style="text-align:center;padding-top:15px;">
                <div style="text-align:center;display: inline-block;">
                    <svg id="fillgauge1" width="97%" height="250" onclick="gauge1.update(NewValue());"></svg>
                </div>
            </div>
            <p style="margin-top:-150px;font-size:35px;"><span style="color:#ff4d4d"> @ViewBag.Risklevel</span></p>

        </div>

        <div class="col-lg-4 bg-warning2" style="margin-top:20px; padding-bottom:30px; padding-right:30px; margin-left:30px;">
            <h4 style="font-weight:800; color:#DF744A">Safety Check List:</h4>
            <ul style="font-size:18px;">
                <li>- Emergency response plan in place</li>
                <li>- Security back-up</li>
                <li>- Duty administrator,senior clinician, psychiatric consultant nurse, patient advocate consulte consulted/advised</li>
                <li>- Other staff are aware of the risk</li>
                <li>- Safety first(never engage if you have concerns for safety)</li>
                <li>- Safety tips reviewed</li>
                <li>- Personal protection, communication devices and duress alarms reviewed</li>
                <li>- Environment checked for safety hazards</li>
                <li>- Adequate staffing (assessment of client by at least two staff)</li>



                </ul>
           </div>
        <div class="col-lg-3 bg-warning2" style="margin-top:20px; padding-bottom:30px; margin-left:30px;">

      
            <h4 style="font-weight:800; color:#DF744A">@(ViewBag.Checkone.Split(':')[0]):</h4>
            <ul style="font-size:18px;">
                @if (!ViewBag.Checkone.Contains(";"))
                {
                    <li>None</li>;
                }
                else
                {
                    foreach (var item in ViewBag.Checkone.Split(':')[1].TrimEnd(' ').TrimEnd(';').Split(';'))
                    {
                        <li>-@item</li>
                    }
                }

            </ul>
            <div style="text-align:right;margin-top:50px;" margin-left:30px;>
                <input type="button" class="btn btn-success" value="Download Whole Page" onclick="printpage()" />
                <br />
                <br />
                <ul>
                    <li><a href="/Location_new/Index" class="btn btn-info">Redo Assessment</a></li>
                </ul>
                <br />
                <br />
            </div>
        </div>
    </div>
            
        @*</div>*@

</div>
@*</div>*@


@section Scripts {
    @*@Scripts.Render("~/bundles/mapbox")*@

<script>

    const TOKEN = "pk.eyJ1IjoieGdhbzAwMTMiLCJhIjoiY2psM2l3MHM5MDY3ejNzcGJiZzIyNnFkeiJ9.BlofvrrG07l1SnJMnTB84A";
        var location_id = '@ViewBag.location_id';
        var location_areaRate = '@ViewBag.AreaRate';
    var loc_id = parseInt(location_id)-1
    var locations = [];
    // The first step is obtain all the latitude and longitude from the HTML
    // The below is a simple jQuery selector
    $(".coordinates").each(function () {
        var longitude = $(".longitude", this).text().trim();
        var latitude = $(".latitude", this).text().trim();
        var description = $(".description", this).text().trim();
        var safe_count = $(".safe_count", this).text().trim();
        safe_count = parseInt(safe_count);
        var unsafe_count = $(".unsafe_count", this).text().trim();
        unsafe_count = parseInt(unsafe_count);
        var final = "";
        if (parseInt(description.split('.')[0]) <= 25) { final = "is lower than most area"; };
        if (parseInt(description.split('.')[0]) > 25 && parseInt(description.split('.')[0])<50) { final = "is lower than average"; };
        if (parseInt(description.split('.')[0]) > 50 && parseInt(description.split('.')[0]) < 75) { final = "is higher than average"; };
        if (parseInt(description.split('.')[0]) > 75) { final = "is higher than the mojority of areas"; };
        var location_name = $(".location_name", this).text().trim();
        var location_vi = parseFloat($(".offence_rate", this).text().trim()) * 100;
        var Offence_count = $(".Offence_count", this).text().trim().split('.')[0];
        //var location_violence_rate = (location_vi * 100).text().trim();
        var location_violence_rate = location_vi.toString();
        //var location_violence_rate = $(".offence_rate", this).text().trim();
        // Create a point data structure to hold the values.
        var point = {
            "latitude": latitude,
            "longitude": longitude,
            "description": "<h4>Physical and sexual assaults in " + location_name + ": " + Offence_count + "</h4><h4> the crime rate " + final + "(according to population) </h4><h4> " + safe_count + " users in our websites marked this place safe</h4><h4>" + unsafe_count + " marked not safe</h4>",
            "centre": "<h4>Physical and sexual assaults in " + location_name + ": " + Offence_count + "</h4><h4> the crime rate " + final + "(according to population) </h4><h4> " + safe_count + " users in our websites marked this place safe</h4><h4>" + unsafe_count + " marked not safe</h4>" 
              
        };
        // Push them all into an array.
        locations.push(point);
    });
    var data = [];
    for (i = 0; i < locations.length; i++) {
        var feature = {
            "type": "Feature",
            "properties": {
                "description": locations[i].description,
                //"icon": "circle-15"
                "icon": ((i === loc_id)? "fire-station-15" : "circle-15"),
                "icon-color": "#ff0000"
               // "icon": "fire-station-15"
            },
            "geometry": {
                "type": "Point",
                "coordinates": [locations[i].longitude, locations[i].latitude]
            }
        };
    data.push(feature);
    }
    mapboxgl.accessToken = TOKEN;
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v10',
        zoom: 11,
        center: [locations[loc_id].longitude, locations[loc_id].latitude]
    });
    var popup = new mapboxgl.Popup({ closeOnClick: false })
        .setLngLat([locations[loc_id].longitude, locations[loc_id].latitude])
        .setHTML(locations[loc_id].centre)
        .addTo(map);
    map.on('load', function () {
        // Add a layer showing the places.
        map.addLayer({
            "id": "places",
            "type": "symbol",
            "source": {
                "type": "geojson",

            "data": {
                "type": "FeatureCollection",
                "features": data
            }
        },
        "layout": {
            "icon-image": "{icon}",
            "icon-allow-overlap": true
        },
            "paint": {
                "icon-color": "#00ff00",
                "icon-halo-color": "#fff",
                "icon-halo-width": 8}
        });

    map.addControl(new MapboxGeocoder({
        accessToken: mapboxgl.accessToken
    }));;
    map.addControl(new mapboxgl.NavigationControl());
    // When a click event occurs on a feature in the places layer, open a popup at the
    // location of the feature, with description HTML from its properties.

    // Add geolocate control to the map.
    map.addControl(new mapboxgl.GeolocateControl({
        positionOptions: {
            enableHighAccuracy: true
        },
        trackUserLocation: true
    }));
    map.on('click', 'places', function (e) {
        var coordinates = e.features[0].geometry.coordinates.slice();
        var description = e.features[0].properties.description;
        // Ensure that if the map is zoomed out such that multiple
        // copies of the feature are visible, the popup appears
        // over the copy being pointed to.
        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
        }
        new mapboxgl.Popup()
            .setLngLat(coordinates)
            .setHTML(description)
            .addTo(map);
    });
    // Change the cursor to a pointer when the mouse is over the places layer.
    map.on('mouseenter', 'places', function () {
        map.getCanvas().style.cursor = 'pointer';
    });
    // Change it back to a pointer when it leaves.
    map.on('mouseleave', 'places', function () {
        map.getCanvas().style.cursor = '';
    });
    });








        var risk_rate = parseFloat(@ViewBag.RiskRate);
        var gauge1 = loadLiquidFillGauge("fillgauge1", risk_rate);
        var config1 = liquidFillGaugeDefaultSettings();


        function printpage() {
            window.print()
        }

    </script>
}
